from typing import Optional, Annotated, Any, NewType
from types import NoneType

# These names are sentinel values exported from Rust
# In order to use them as type annotations they're declared as types here
NativeEndian = NewType("NativeEndian", NoneType)
BigEndian = NewType("BigEndian", NoneType)
LittleEndian = NewType("LittleEndian", NoneType)

class _cstruct:
    def __new__(
        cls,
        buffer: Optional[bytes] = None,
        endianness: Optional[NativeEndian | BigEndian | LittleEndian] = None,
    ) -> _cstruct: ...
    def _type_and_offset_of(self, attr: str) -> tuple[type, int]: ...
    def _offset_of(self, attr: str) -> int: ...
    def _type_of(self, attr: str) -> type: ...
    def __getattr__(self, attr: str) -> Any: ...
    @classmethod
    def __packed_size__(cls) -> int: ...

class _bool:
    def __new__(
        cls,
        value: Optional[Annotated[bytes, 1] | bool] = None,
        endianness: Optional[NativeEndian | BigEndian | LittleEndian] = None,
    ) -> _bool: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    @classmethod
    def __packed_size__(cls) -> int: ...

class _i8:
    def __new__(
        cls,
        value: Optional[Annotated[bytes, 1] | int] = None,
        endianness: Optional[NativeEndian | BigEndian | LittleEndian] = None,
    ) -> _i8: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    @classmethod
    def __packed_size__(cls) -> int: ...

class _i16:
    def __new__(
        cls,
        value: Optional[Annotated[bytes, 2] | int] = None,
        endianness: Optional[NativeEndian | BigEndian | LittleEndian] = None,
    ) -> _i16: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    @classmethod
    def __packed_size__(cls) -> int: ...

class _i32:
    def __new__(
        cls,
        value: Optional[Annotated[bytes, 4] | int] = None,
        endianness: Optional[NativeEndian | BigEndian | LittleEndian] = None,
    ) -> _i32: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    @classmethod
    def __packed_size__(cls) -> int: ...

class _i64:
    def __new__(
        cls,
        value: Optional[Annotated[bytes, 8] | int] = None,
        endianness: Optional[NativeEndian | BigEndian | LittleEndian] = None,
    ) -> _i64: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    @classmethod
    def __packed_size__(cls) -> int: ...

class _i128:
    def __new__(
        cls,
        value: Optional[Annotated[bytes, 16] | int] = None,
        endianness: Optional[NativeEndian | BigEndian | LittleEndian] = None,
    ) -> _i128: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    @classmethod
    def __packed_size__(cls) -> int: ...

class _u8:
    def __new__(
        cls,
        value: Optional[Annotated[bytes, 1] | int] = None,
        endianness: Optional[NativeEndian | BigEndian | LittleEndian] = None,
    ) -> _u8: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    @classmethod
    def __packed_size__(cls) -> int: ...

class _u16:
    def __new__(
        cls,
        value: Optional[Annotated[bytes, 2] | int] = None,
        endianness: Optional[NativeEndian | BigEndian | LittleEndian] = None,
    ) -> _u16: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    @classmethod
    def __packed_size__(cls) -> int: ...

class _u32:
    def __new__(
        cls,
        value: Optional[Annotated[bytes, 4] | int] = None,
        endianness: Optional[NativeEndian | BigEndian | LittleEndian] = None,
    ) -> _u32: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    @classmethod
    def __packed_size__(cls) -> int: ...

class _u64:
    def __new__(
        cls,
        value: Optional[Annotated[bytes, 8] | int] = None,
        endianness: Optional[NativeEndian | BigEndian | LittleEndian] = None,
    ) -> _u64: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    @classmethod
    def __packed_size__(cls) -> int: ...

class _u128:
    def __new__(
        cls,
        value: Optional[Annotated[bytes, 16] | int] = None,
        endianness: Optional[NativeEndian | BigEndian | LittleEndian] = None,
    ) -> _u128: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    @classmethod
    def __packed_size__(cls) -> int: ...

class _f16:
    def __new__(
        cls,
        value: Optional[Annotated[bytes, 2] | float] = None,
        endianness: Optional[NativeEndian | BigEndian | LittleEndian] = None,
    ) -> _f16: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    @classmethod
    def __packed_size__(cls) -> int: ...

class _f32:
    def __new__(
        cls,
        value: Optional[Annotated[bytes, 4] | float] = None,
        endianness: Optional[NativeEndian | BigEndian | LittleEndian] = None,
    ) -> _f32: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    @classmethod
    def __packed_size__(cls) -> int: ...

class _f64:
    def __new__(
        cls,
        value: Optional[Annotated[bytes, 8] | float] = None,
        endianness: Optional[NativeEndian | BigEndian | LittleEndian] = None,
    ) -> _f64: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    @classmethod
    def __packed_size__(cls) -> int: ...
