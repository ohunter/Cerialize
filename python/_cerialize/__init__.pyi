from typing import (
    Optional,
    Annotated,
    Any,
    NewType,
    TypeVarTuple,
    SupportsBytes,
)
from types import NoneType
from dataclasses import dataclass

Shape = TypeVarTuple("Shape")

# These names are sentinel values exported from Rust
# In order to use them as type annotations they're declared as types here
NativeEndian = NewType("NativeEndian", NoneType)
BigEndian = NewType("BigEndian", NoneType)
LittleEndian = NewType("LittleEndian", NoneType)

@dataclass
class BufferLen:
    value: int

class Shaped:
    @classmethod
    def __class_getitem__(cls, *params: int): ...

class cstruct(Shaped[*Shape]):
    def __new__(
        cls,
        buffer: Optional[bytes] = None,
        endianness: Optional[NativeEndian | BigEndian | LittleEndian] = None,
    ): ...
    def _type_and_offset_of(self, attr: str) -> tuple[type, int]: ...
    def _offset_of(self, attr: str) -> int: ...
    def _type_of(self, attr: str) -> type: ...
    def __getattr__(self, attr: str) -> Any: ...
    @classmethod
    def __packed_size__(cls) -> int: ...

class boolean(Shaped[*Shape]):
    def __new__(
        cls,
        value: Optional[Annotated[SupportsBytes, BufferLen(1)] | bool] = None,
        endianness: Optional[NativeEndian | BigEndian | LittleEndian] = None,
    ): ...
    def __repr__(self) -> str: ...
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    @classmethod
    def __packed_size__(cls) -> int: ...

class i8(Shaped[*Shape]):
    def __new__(
        cls,
        value: Optional[Annotated[SupportsBytes, BufferLen(1)] | int] = None,
        endianness: Optional[NativeEndian | BigEndian | LittleEndian] = None,
    ): ...
    def __repr__(self) -> str: ...
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    @classmethod
    def __packed_size__(cls) -> int: ...

class i16(Shaped[*Shape]):
    def __new__(
        cls,
        value: Optional[Annotated[SupportsBytes, BufferLen(2)] | int] = None,
        endianness: Optional[NativeEndian | BigEndian | LittleEndian] = None,
    ): ...
    def __repr__(self) -> str: ...
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    @classmethod
    def __packed_size__(cls) -> int: ...

class i32(Shaped[*Shape]):
    def __new__(
        cls,
        value: Optional[Annotated[SupportsBytes, BufferLen(4)] | int] = None,
        endianness: Optional[NativeEndian | BigEndian | LittleEndian] = None,
    ): ...
    def __repr__(self) -> str: ...
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    @classmethod
    def __packed_size__(cls) -> int: ...

class i64(Shaped[*Shape]):
    def __new__(
        cls,
        value: Optional[Annotated[SupportsBytes, BufferLen(8)] | int] = None,
        endianness: Optional[NativeEndian | BigEndian | LittleEndian] = None,
    ): ...
    def __repr__(self) -> str: ...
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    @classmethod
    def __packed_size__(cls) -> int: ...

class i128(Shaped[*Shape]):
    def __new__(
        cls,
        value: Optional[Annotated[SupportsBytes, BufferLen(16)] | int] = None,
        endianness: Optional[NativeEndian | BigEndian | LittleEndian] = None,
    ): ...
    def __repr__(self) -> str: ...
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    @classmethod
    def __packed_size__(cls) -> int: ...

class u8(Shaped[*Shape]):
    def __new__(
        cls,
        value: Optional[Annotated[SupportsBytes, BufferLen(1)] | int] = None,
        endianness: Optional[NativeEndian | BigEndian | LittleEndian] = None,
    ): ...
    def __repr__(self) -> str: ...
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    @classmethod
    def __packed_size__(cls) -> int: ...

class u16(Shaped[*Shape]):
    def __new__(
        cls,
        value: Optional[Annotated[SupportsBytes, BufferLen(2)] | int] = None,
        endianness: Optional[NativeEndian | BigEndian | LittleEndian] = None,
    ): ...
    def __repr__(self) -> str: ...
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    @classmethod
    def __packed_size__(cls) -> int: ...

class u32(Shaped[*Shape]):
    def __new__(
        cls,
        value: Optional[Annotated[SupportsBytes, BufferLen(4)] | int] = None,
        endianness: Optional[NativeEndian | BigEndian | LittleEndian] = None,
    ): ...
    def __repr__(self) -> str: ...
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    @classmethod
    def __packed_size__(cls) -> int: ...

class u64(Shaped[*Shape]):
    def __new__(
        cls,
        value: Optional[Annotated[SupportsBytes, BufferLen(8)] | int] = None,
        endianness: Optional[NativeEndian | BigEndian | LittleEndian] = None,
    ): ...
    def __repr__(self) -> str: ...
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    @classmethod
    def __packed_size__(cls) -> int: ...

class u128(Shaped[*Shape]):
    def __new__(
        cls,
        value: Optional[Annotated[SupportsBytes, BufferLen(16)] | int] = None,
        endianness: Optional[NativeEndian | BigEndian | LittleEndian] = None,
    ): ...
    def __repr__(self) -> str: ...
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    @classmethod
    def __packed_size__(cls) -> int: ...

class f16(Shaped[*Shape]):
    def __new__(
        cls,
        value: Optional[Annotated[SupportsBytes, BufferLen(2)] | float] = None,
        endianness: Optional[NativeEndian | BigEndian | LittleEndian] = None,
    ): ...
    def __repr__(self) -> str: ...
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    @classmethod
    def __packed_size__(cls) -> int: ...

class f32(Shaped[*Shape]):
    def __new__(
        cls,
        value: Optional[Annotated[SupportsBytes, BufferLen(4)] | float] = None,
        endianness: Optional[NativeEndian | BigEndian | LittleEndian] = None,
    ): ...
    def __repr__(self) -> str: ...
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    @classmethod
    def __packed_size__(cls) -> int: ...

class f64(Shaped[*Shape]):
    def __new__(
        cls,
        value: Optional[Annotated[SupportsBytes, BufferLen(8)] | float] = None,
        endianness: Optional[NativeEndian | BigEndian | LittleEndian] = None,
    ): ...
    def __repr__(self) -> str: ...
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    @classmethod
    def __packed_size__(cls) -> int: ...
